Porject 
========
Project Name : GigHub 
------------------------------------------------------------------------------------------------------------------------------------
00 Before starting 
=========================
we use resharper 
	so enable there shortcut keyboard 
we use productivity tools 
	go to tools => options => productivity Power tools
				=> Power Commands 
	enable both : 
			Format on save 
			remove and and sort using on save 

01 Course Introduction
=========================
Project Sammary & Requirement : 

	-  GigHub is a mini social network that makes it realy easy
	   for live music lover to track the gigs of their favorite artists 

	- Artists can sing up and list their gigs. When adding a gig they should specify 
	  the date/time , location and genre of the gig 

	- An artists should have a page called My Upcoming Gigs .
	  From there , they should be able to edit or remove an 
	  existing gig, or add another gig to the list 
	
	- user should be able to view all upcoming gigs or search 
	  them by artist, genre or location , they should be able to 
	  view details of a gig and add it to their calender.
	
	- Additionaly, user should be able to follow their favoite 
	  artists. When they follow an artist, they should see the upcoming
	  gigs of their favoite artist in the Gig feed 
	  
Use Cases : 
  - Extracted from requirements
  - Express use case with few words 
  - Details can come later 
  - this approach  will made communication with team esier 

How to extract use Case : 
  - from requirements we extrat them by going throw  line by line 
  - Looking for Verbs 
  - we may extract same use case from defferant requirement
  - Some use case indicate at some missing part of others use cases 
	. For Example : 
	  + for ever word like 
		add/Create or her sister (edit/Modify remove/Delete) 
		we may have use case for edit/Modify , remove/Delete
  - We may have same use case with same name but for defferant user 
	. For Example : 
	  + UseCase 1 (User1)
		UseCase 1 (User2)
  - we add under use case name the data or some detail it use in {}
   (Note : this is my preferance not golbal or sentific way )
  - finaly Clean up by grouping use case in general title or big use case 


Project Use Case : 

	- Requirement : 
	  + GigHub is a mini social network that makes it realy easy
		for live music lover to track the gigs of their favorite artists
	  
		=> Use Case : 
					  @ Track/View gigs (so we had gigs ) 
							  == Later ==> Manage  gigs (Add/Create , Delete , Update) 

	- Requirement : 
	  + Artists can sing up and list their gigs. When adding a gig they should specify 
		the date/time , location and genre of the gig
	  
		=> Use Case : 
					  @ Sing up (so we had authentication )
						  # Sing up / Creating Profile |
						  # Log in                     |
						  # Log out                    |==> Authentication (Which come with Asp.net frameworks)
						  # Change Passowrd            |
						  # Edit Profile               |
					  @ Add Gigs 

	- Requirement : 
	  + An artists should have a page called My Upcoming Gigs .
		From there , they should be able to edit or remove an 
		existing gig, or add another gig to the list 
	  
		=> Use Case : 
					  @ Upcoming Gigs (artists)
					  @ Add Gigs    
					  @ Edite Gigs  
					  @ Remove Gigs 

	- Requirement : 
	  + user should be able to view all upcoming gigs or search 
		them by artist, genre or location , they should be able to 
		view details of a gig and add it to their calender.

		=> Use Case :                     
					  @ Veiw upcoming gigs
					  @ Search gigs 
					  @ View gig details 
					  @ Add gig to calender  (so we had remove and edite)

	- Requirement : 
	  + Additionaly, user should be able to follow their favoite 
		artists. When they follow an artist, they should see the upcoming
		gigs of their favoite artist in the Gig feed

		=> Use Case :                     
					  @ Follow artist ==so we had (Missing parts )==>
						# Follow artist
						# Unfollow artist
						# who i am follow
						# Gig feed (which is upcoming gigs but with other name )

Clean Up Porject Use case:

					  @ Sing up / Creating Profile |
					  @ Log in                     |
					  @ Log out                    |==> Authentication (Which come with Asp.net frameworks)
					  @ Change Passowrd            |
					  @ Edit Profile               |
												 
					  @ Upcoming Gigs (artists)    |                
					  @ Upcoming Gigs (User)       |                
					  @ Add Gigs                   |  
						{artist,genre,location}    |==> Gigs 
					  @ Edite Gigs                 |
					  @ Remove Gigs                |
					  @ View gig detail            |
												   
					  @ Add Gigs to calender       |
						{Date time , Gig}          |
					  @ Remove gigs from calender  |==> Gigs Calender                
					  @ View gigs am attending     |       

					  @ Follow artist    |
					  @ Unfollow artist  |==> Following 
					  @ Who i am follow  |
					  @ Gig feed         |

some use case depend on other one 
  - we can not remove or edite gig without adding one 
	Unfollow artist ==depend on==> Follow artist ==depend on==> view Gigs

after determain the dependecy for each use case we order them 

we will drow the following chart base on dependecy , the implementation plan and data flow 

	1                 2                          3                        4                     5                                                  
		 |                            |                     |                        |                                                    Add Gig |		               |		     |			      |	            
		 | My  upcoming gigs (artist) | Edit gig            | View gigs am attending | Remove gigs from 
		 | All upcoming gigs          | remove gig          | Who i am follow        |       calender
		 |                            | Add gig to calender | Gig Feed               |
		 |                            | Follow artist       |                        | Unfollow artist
		 |                            | search              |                        |
		 |                            | View gig detail     |                        |
		 |                            |                     |                        |
		 |                            |                     |                        |

From the chart above we pick the core use cases which will implement 
------------------------------------------------------------------------------------------------------------------------------------

03 Planning the First Iteration
=================================
------------------------------------------------------------------------------------------------------------------------------------

04 Building a Model Using Code-first Workflow
===============================================
We start by 
  - opening visual studio and create Asp.net (.Net) Project
  - with name "Gighub"
  - Mvc Template 
  - with single user Authenticationt

Before we build Models for our domain insure  entity fram work to the porject is installed 
 we will Build our Progect to update the binary then we will  :
	- Enable Migration
	- Add Migration 
	- create or Database 


We can do that by using the following commands in Package Manager Console 
 - Enable-Migrations
	+ this will create Migration Folder with  Configration.cs
	+ this command will run just once 
 - Add-Migration {Migration Name}
	+ this will add migration file to Migration folder 
		@  the file name will Be {date the file created} + {Migration Name}
	+ move change in models to database 
 - Update-Database
	+ this will create our database in App_Data folder and put .mdf file there 
	+ database file name will come for the connectionStrings in Web.config file 
		from the Catalog 


Awlayse use smale change in model against database for smale migration  


Now let create or Models {domain classes} inside Models folder  
 - Models classes : 
	+ Gig
	+ Gennera 

	# Note : will will create this classes in one file (Gig class)
	         then use resharper to move the 2end class to saparate class file  
			 by using shortcut : Alt + Enter then	
											move to {className.cs} ==>  Move types to matching file in files 
		@ Code : 
					// Gig class 
					    public class Gig
						{
							public ApplicationUser Artist { get; set; }
							public DateTime DateTime { get; set; }
							public string Venue { get; set; }
							public genre genre { get; set; }

						}
					// genre class
						public class Genre
						{
							public byte Id { get; set; }
							public string Name { get; set; }
						}
						
  # Note : ApplicationUser is class can found in our project in IdentityModels.cs
			drived from IdentityUser class

Any running Migration aginst databse will not updated 
	- Becuse we did not add the model as entity in our ApplicationDbContext Class
	- ApplicationDbContext Class can be found in IdentityModels.cs
	- we make IdentityModels.cs file more cleaner by moving ApplicationContext to another file 
		+ by useing  resharper Alt + Enter => Move types to matching file in files 

In ApplicationContext.cs , ApplicationContext class we add the following line of code 
		@ Code : 
			
			    public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
				{

					public DbSet<Gig> Giggs { get; set; }
					public DbSet<Genres> Genres { get; set; }

					...
				}

Now if we run 
	- Add-Migration ModelsMigration
	- Update-Database
		+ we will get Giggs table in databse with Artest_Id as foreng key 

If we go to Table Defination to Gig table we will find Venue Column Data type is nvarchar(Max) and nullable 
 becuse we put venue property in gig class as string data type so it wikl merrorise as nvarchar(Max)

To get more controle on database via code we we had 2 ways
	- Data annotation
		+ has limtaion 
		+ easy to use
	- flulant api 
		+ stronger and get more controle on database via code
		+ harder to learn 

For now we will use Data annotation

Data annotation
	- Live in using System.ComponentModel.DataAnnotations;
	- We use property decoration which is 
		+ [] over the porperty line 
			@Code 
				public Class ClassName 
				{
					[Data Annotation]
					Class Property {get; set;}
				}
	- most used data anotation :
		+ [Key] : to set property as primary key in data base
		+ [Requier] : denay nullable 
		+ [StringLength(maximumLingth,errormessage)] : set the varchar , nvarchar or string lingth in column 
		+ [Dispaly(Name="")] : Using this attribute we can specify property name to be displayed on view
		+ [Column (string name, Properties:[Order = int],[TypeName = string])
			configure the corresponding column name, data type and order in a database table
				# name: Name of a column in a db table.
				# Order: Order of a column, starting with zero index. (Optional)
				# TypeName: Data type of a column. (Optional)
		+ [DataType(DataType.{Text Email Password})] This attribute is used to specify the datatype of the model and reflect it on view.
		+ [DatabaseGenerated(DatabaseGeneratedOption.{None Identity})]
			DatabaseGeneratedOption.None : 
									option specifies that the value of a property will not 
									be generated by the underlying database
			DatabaseGeneratedOption.Identity: 
									You can mark the non-key (non-id) properties as DB-generated properties
									the value of the property will be generated by the database on the INSERT statement. 
									This Identity property cannot be updated.
			

Finaly for this section we will pupulate Geners Table with data via Sql statment using c# code 
	- so why did not go and build Admin and Gener pages and use sql woth 1st code approach 
		+ simply becuse admin and Genre out of porject scope 
			# this is a commnen problem where developer do something and find him self do and solve another sthing
		+ sql via C# is easy simple fast 


Pupulate Geners Table with data via Sql statment using c# code 
	- create new Migration with name PapulateGenerTableWithData 
	  (Alt+/+. to open package mananger console)   
			+ Add-Migration PapulateGenerTableWithData
	- Alt+Shift+N : write  PapulateGenerTableWithData and enter to go to file and on 
	  Up method we will and the following Sql Code 
	  
			@Code 
					public override void Up()
					{
						Sql("INSERT INTO Genres VALUES (1,'Jazz')");
						Sql("INSERT INTO Genres VALUES (2,'Blues')");
						Sql("INSERT INTO Genres VALUES (3,'Rock')");
						Sql("INSERT INTO Genres VALUES (4,'Country')");
					}
	- Becuse we alter Up Method we need to do the same for Down Method so we can rollback
			@Code
					public override void Down()
					{
						Sql("DELETE FROM Genres WHERE Id ON(1,2,3,4)");
					}

	- Updat Database via Package Manager Console 
			+ Update-DataBase
------------------------------------------------------------------------------------------------------------------------------------

05 Building a Form with Bootstrap
===================================

*** Most Important : Create Drop Donwlsit and Papulate With Data *** 

- Add Gigcontroller to Controllers
	+ we change the name of index action result to Create 
				@ Code : 
				        [HttpGet]
						public ActionResult Create()
						{
							return View();
						}
	+ we will alter it later 

- View Model Consept
	+ Conseder View Model as same as Model for databse but for view
	+ in Gig class we had DateTime porperty 
		# which will break it to 2 properties in ViewModel so it will become 2 input filed on our view 
	+ on Get 
		# Controller => ViewModel => View
	+ on Post 
		# View => Controller => ViewModel => Model => Db 
		# Note mostly every things come  from view come as string  
	+ Any DataAnnotation  decoration like : [Dispaly]  [requier] [StringLingth] [Regx]...
		and any DataAnnotation with effect the view 

	+ If we need to esacp ViewModel approach so 
		# on post View => Controller => Model => Db
		# on get  Model=> Controller => View
		# we can :
				 > create bind and unbind properties in model
					bind properties is the broken porperty in view Model 
					unbind properties are the properties come form broken porperty 
				 > map bind or unbind porperty on controller 
						@ Code 
							// in Controller Class
							// this will Exclude one or more properties
							public ActionResult Create([Bind(Exclude="Property1 Name","Property2 Name",...)] ModelClass Model)
							{
								...
							}

							// this will include one or more properties
							public ActionResult Create([Bind(Include="Property1 Name","Property2 Name",...)] ModelClass Model)
							{
								...
							}
				> Process the data in contrller before handle it to model
						@ Code
							//FormCollection
							[HttpPost]
							public ActionResult Create(FormCollection collection)
							{
								// Get input value from FormCollection obeject which is here collection
								// For FormCollection obeject datatype is array idexed by input name 
								var InputValue = collection["{InputName}"];

								// Process InputValue like convert to int 
								ProcessValue = Convert.ToInt32(InputValue);

								// make change to db context porperty 
								DbContext.Porperty = ProcessValue
								// code if modelstate change (not sure)
								//save change 
							}
							// using Request
							public ActionResult Create()
							{
								// Get Input value from Request object which is array indexd by InputName
								var InputValue = Request["InputName"];

								// Process InputValue like convert to int 
								ProcessValue = Convert.ToInt32(InputValue);

								// make change to db context porperty 
								DbContext.Porperty = ProcessValue
								// code if modelstate change (not sure)
								//save change 
							}

	+ Create Folder "ViewModels"
		# Add class GigFormViewModel 
			> GigFormViewModel Properties is same as gig class but we breake some porperties to more than one 
				to get effect on view 
						@Code 
							    public class GigFormViewModel
								{
									// not 
									public string Venue { get; set; }
									public string Date { get; set; }
									public string Time { get; set; }
									//the follwing propert is for dropdown list 
									//binding value 
									public int Genre { get; set; }
									// list Data : list view items 
									public IEnumerable<Genre> Genres { get; set; }

								}
- workin with razore 
	+ Razore is view template rendering engien 
	+ via razore we can paly C# within html 
	+ to write C# we just start the line with @ 
	+ to write C# in multi line we use @{ multi line code }
	+ to comment in razore @* Comment *@

- Create Gig view 
	+ Create Folder inside View Folder name it as same as Controller name GigControllet so folder name is Gig
	+ So create Folder "Gig"
		# Create view file and name it as Action Method 
			> our Action Method name is Create so file name is Create.cshtml
	+ So now we can run porject and go to : 
		# Https://localHost:{Port}/Controller/ActionMethod 
			> Https://localHost:{Port}/Gig/Create
			> Port= 44353 Here (may another port depend on porject setting)
			> Https://localHost:44353/Gig/Create
	+ Inside Create.cshtml we add model we work with which is GigFormViewModel
		# just add @model ViewModels and hit Alt+enter so Resharper will resolve the namespace to become 
			> @model Gighub.ViewModels.GigFormViewMode

- Working with shared Folder 
	+ This folder can be founded inside View Folder 
	+ Is contain the master page or shared layout "_Layout.cshtml" , partial views , static html/cshtml files 
		like "error.cshtml" 

- working with link "Action link"
	+ To go fast to Https://localHost:44353/Gig/Create
		# we will create a link
		# asp.net razore had method for it .ActionLink() :
			> we can access throw @Html 
			> razore engine will rander it to html to link <a href=""> Label </a>  
		# @Html.ActionLink("Link Label or Text" ,"Action Method" ,"Controller Name" ,	Route Values   , Html Attribute)
		  @Html.ActionLink("Application name"	,	"Index"		 ,		"Home"		, new { area = "" }, new { @class = "navbar-brand" }) 
				@Code : 
						@Html.ActionLink("Add Gig","Create","Gig")
- working with dynamic contant
	# Most dynamic contant is contant comes from data base 
	# we rander it throw :
		 @RenderBody()
	# we place this method inside _Layout.cshtml

- working with Partial view 
	# Partial View: is a small piece of content that may be reused on different pages,
					or multiple times in a page
	# We create Partial view file inside  Views/Shared 
	# we render it view : @Html.Partial("Partial view Name")
		@ code 
			@Html.Partial("_LoginPartial")
			@* Where we had decoment named _LoginPartial.cshtml *@
	
= Working with Bootstrap
	+ Bootstrap is css framwork that give modern and resposive web page 
	+ For bootstarp Form and input we should mamorise 3  css class
		# form-group : to group web page controles like in one div label and input 
						this will dispaly inputs  virtical 
		# form-inline : this will dispaly inputs  hrizental
		# form-control : to add bootstrap look and feel to input like text filed 
							never used with label 


- Create the Form
	Note : this topic "Create the Form" is advanced one 
			Come from saveing data section 
			where use razore to create the form 
	+ We can access most Form throw @Html
	+ With method @Html.BeginForm()
	+ to use it corectly we put it inside @Useing(){} statment
		# so it will render corectlty to html with Begin and closing form tag <form></form>
	+ BeginForm() most complex overload one Take 4 parameters BeginForm(val1, val2 ,val3 , val4) :
		# val1 : Action method which is Create
		# val2 : Controller which is Gig
		# val3 : is  FormMethod which is : 
			> FormMethod.Get 
			> FormMethod.Post 
			
		# val4 : To apply css class we pass anynmuose obejct new keyword
				
				@Code 
					@using (Html.BeginForm("ActionMetod", "Controller", FormMethod.{Get or Post}, new {@class="CssClass"}))
					{
						// Inputs 
					}

				@code 
					// what we use 
					// we will use overload method BeginForm(Action , Controller)
					// this method do not contain therd argument becuse we declare it the get and post inside Controller 
					// via decoration [HttpGet] [HttpPost]

					@using (Html.BeginForm("Create", "Gig"))
					{
						//Inputs 

					}
				
- Add Inputs	
	+ We can access most inputs throw @Html 
		# @Html.{InputFor}(Model=>Model.ModelPorerty)
	+ To apply css class we pass anynmuose obejct new keyword
		to apply html attribute we pass  as  second arrgument in the anynmuose obejct 
		# @Html.{InputFor}(Model=>Model.ModelPorerty , new {@class= "CssClass",@placeholder="What want To Dispaly"})
	+ Inputs : 
		// Note m=>m.property m stand for Model
		// Note : Css class is 
		# Label : @Html.LabelFor(m=>m.ModelPorperty)
		# Text Field :  @Html.TextBoxFor(m=>m.ModelPorperty, new { @class = "form-control", @placeholder = "label" })
		# Drop Down List : @Html.DropDownListFor() // which will explan soon in detail 
			@Code 
				// add this inside form 
				<div class="form-group">
					@Html.TextBoxFor(m => m.Venue, new { @class = "form-control", @placeholder = "Venue" })
				</div>
				<div class="form-group form-inline">
					@Html.TextBoxFor(m => m.Time, new { @class = "form-control", @placeholder = "Time" })
					@Html.TextBoxFor(m => m.Date, new { @class = "form-control", @placeholder = "Date" })
				</div>
				<div class="form-group">
					@Html.DropDownListFor(m => m.Genre, new SelectList(Model.Genres, "Id", "Name"), "", new { @class = "form-control" })
					@* @Html.DropDownListFor(m => m.Genre, new SelectList(Model.Genres, "Id", "Name"), "", new { @class = "form-control" }) *@
				</div>
				<button type="submit" class="btn btn-primary">Save</button>

- Alter Controller to Build Genre dropDownLsit 
	+ Add Prperties to Controller class  
		# we need to expose the entity model on the controller GigController 
		# we need to expose the view model to the controller to deal with GigController
		# so we need 2 properties 
				@Code : 
						public class GigController : Controller
						{
							protected readonly ApplicationDbContext _Db;
							protected readonly GigFormViewModel _GigFormViewModel;
							[HttpGet]
							public ActionResult Create()
							{
								return View();
							}
						}

	+ Work with dependncy injection (DI)
		# the most basic DI come via class constractore
				@Code : 
						public class GigController : Controller
						{
							protected readonly ApplicationDbContext _Db;
							protected readonly GigFormViewModel _GigFormViewModel;
							public GigController() : this(new ApplicationDbContext(), new GigFormViewModel())
							{

							}

							public GigController(ApplicationDbContext Db, GigFormViewModel GigForm)
							{
								_Db = Db;
								_GigFormViewModel = GigForm;
							}
							[HttpGet]
							public ActionResult Create()
							{
								return View();
							}
						}		
			
	+ Papulate Genre dropDownLsit with data from model 
				@Code : 
						public class GigController : Controller
						{
							protected readonly ApplicationDbContext _Db;
							protected readonly GigFormViewModel _GigFormViewModel;
							public GigController() : this(new ApplicationDbContext(), new GigFormViewModel())
							{

							}

							public GigController(ApplicationDbContext Db, GigFormViewModel GigForm)
							{
								_Db = Db;
								_GigFormViewModel = GigForm;
							}
							[HttpGet]
							public ActionResult Create()
							{
								var ViewModel = _GigFormViewModel;
								ViewModel.Genre = _Db.Genre.ToList();
								return View();
							}
							// Or 
							//public ActionResult Create()
							//{
								//            var ViewModel = new GigFormViewModel
								//            {
								//                Genres = _Db.Genres.ToList()
								//            };
								//return View(ViewModel);
							}
						}
- Build Genre dropDownLsit in view 
  @Html.DropDownListFor(m => m.Genre   , new SelectList(Model.Genres,            "Id"                ,          "Name"             ) ,            ""          , new {@class = "form-control"})
//@Html.DropDownListFor(Binding Porpert, new SelectList(Data Source , Name of porperty in Genre class, The Dispalay label which is ) , defulat selected value ,				css calss        )
																			 that use as value of			a property name in 
																			     list opetios					Genre class

- Add submit button 
				@ Code
					<button type="submit"  class="btn btn-default">Save</button>

		+ always submit button take 2 css classes
				# btn as promary class 
				# btn-{value} as secondary class 
					> Value : 
						defualt => for whit button 
						primary => for blue button 
						success => for green button 
						warning => for orange button 
						danger	=> for red button 
						info	=> for lite blue button
						link	=> for link button => this will create link insted of button 

------------------------------------------------------------------------------------------------------------------------------------
i follow from here without writting if i back taking note i should start from 1st vedio on saveing data section 
and only write the section title i watched 

06 Saving Data
================

